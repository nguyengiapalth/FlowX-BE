package project.ii.flowx.module.file;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.Named;
import org.springframework.beans.factory.annotation.Autowired;
import project.ii.flowx.applications.helper.MinioService;
import project.ii.flowx.module.file.dto.FileCreateRequest;
import project.ii.flowx.module.file.dto.FileResponse;
import project.ii.flowx.module.file.dto.FileUpdateRequest;
import project.ii.flowx.module.file.entity.File;

import java.util.List;

/**
 * Mapper interface for converting between File entity and File DTOs.
 * This interface uses MapStruct to generate the implementation at compile time.
 * Handles MinIO URL generation for file access.
 */
@Mapper(componentModel = "spring")
public abstract class FileMapper {

    @Autowired
    protected MinioService minioService;

    /**
     * Convert File entity to FileResponse DTO
     * Generates presigned URLs for file access using MinIO service
     */
    @Mapping(target = "url", source = "objectKey", qualifiedByName = "objectKeyToUrl")
    public abstract FileResponse toFileResponse(File file);

    /**
     * Convert FileCreateRequest to File entity
     * Ignores all system-managed fields that will be set by service
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "uploaderId", ignore = true) // Will be set by service
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "bucket", ignore = true) // Will be set by service
    @Mapping(target = "objectKey", ignore = true) // Will be generated by service
    @Mapping(target = "contentHash", ignore = true) // Will be calculated by service
    @Mapping(target = "actualSize", ignore = true) // Will be set by service
    @Mapping(target = "fileStatus", ignore = true) // Will be set to PROCESSING by service
    public abstract File toFile(FileCreateRequest fileCreateRequest);

    /**
     * Convert list of File entities to list of FileResponse DTOs
     */
    public abstract List<FileResponse> toFileResponseList(List<File> files);

    /**
     * Generate presigned download URL from object key
     * Handles null/empty values gracefully and provides error handling
     */
    @Named("objectKeyToUrl")
    protected String objectKeyToUrl(String objectKey) {
        if (objectKey == null || objectKey.trim().isEmpty()) {
            return null;
        }
        
        try {
            // Generate presigned URL with 24 hours expiry
            return minioService.getPresignedDownloadUrlFromObjectKey(objectKey, 3600 * 24);
        } catch (Exception e) {
            // Log error but don't throw exception to avoid breaking the mapping
            // Consider using a logger here in production
            return null;
        }
    }
}