plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.11'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'project.ii'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation 'org.springframework:spring-webflux'

    // Database
    runtimeOnly 'org.postgresql:postgresql:42.7.5'
    
    // Jackson for Redis
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    
    // Caffeine Cache
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    
    // MinIO for file storage
    implementation 'io.minio:minio:8.5.2'
    
    // MapStruct for object mapping
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    
    // Lombok-MapStruct binding
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    
    // OpenAPI/Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'
    
    // Spring Security
    implementation 'org.springframework.security:spring-security-crypto'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'org.springframework.security:spring-security-oauth2-jose:6.2.2'
    testImplementation 'org.springframework.security:spring-security-test'
    
    // Google OAuth2
    implementation 'com.google.api-client:google-api-client:1.34.1'
    implementation 'com.google.oauth-client:google-oauth-client:1.34.1'
    implementation 'com.google.http-client:google-http-client-jackson2:1.41.7'
    
    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
}

// Define snippets directory for documentation (must be defined first)
ext {
    snippetsDir = file('build/generated-snippets')
}

// Configure annotation processors order (important for Lombok + MapStruct)
compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}

// Test configuration
test {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

// Asciidoctor configuration
asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

// Build configuration
jar {
    enabled = false
    archiveClassifier = ''
}

bootJar {
    enabled = true
    archiveClassifier = ''
}

// Gradle wrapper configuration
wrapper {
    gradleVersion = '8.5'
    distributionType = Wrapper.DistributionType.BIN
} 